// 1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가?

// 8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다.
// (※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 함)


function solution(){
  let EightCnt = 0;
  for(let i = 0; i <= 100; i++){
    // console.log(i.toString().split(/8/g));
    EightCnt += i.toString().split(/8/g).length - 1;

}
  return EightCnt;
}


// /8/g는 문자열에서 숫자 8을 모두 찾는 정규식 패턴이다.


// i를 문자열로 만든 다음 , 숫자 8의 기준으로 분할함 
//  여기서 8을 기준으로 분할했기 때문에 8은 생략된다.
// [ '4', '5', '' ]
console.log('4858'.split(/8/g).length - 1);

// [ '42', '4', '3' ] 8이 두개 이기때문에 8을 생략하면 원소가 3개로 분할된다.
//  2개가 생략댔기때문에 3개의 원소로 구분됨 때문에 길이에 -1을 해줘야 8의 등장 횟수를 알수있다,
console.log('428483'.spㄴlit(/8/g).length - 1);